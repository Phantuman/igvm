#!/usr/bin/env python
#
# igvm - InnoGames VM Management Tool
#
# Copyright (c) 2016, InnoGames GmbH
#

"""InnoGames VM Management Tool"""

from argparse import ArgumentParser
import logging
import time

from fabric.network import disconnect_all

import adminapi

from igvm.buildvm import buildvm
from igvm.migratevm import migratevm
from igvm.commands import (
    disk_set,
    host_info,
    mem_set,
    vcpu_set,
    vm_start,
    vm_stop,
    vm_restart,
    vm_delete,
    vm_sync,
)
from igvm.utils.virtutils import close_virtconns

top_parser = ArgumentParser(__doc__)
subparsers = top_parser.add_subparsers(
    help='Actions',
)

subparser = subparsers.add_parser(
    'build',
    description=(__doc__ + ' - Build VM'),
)
subparser.set_defaults(func=buildvm)
subparser.add_argument(
    'vm_hostname',
    help='Hostname of the guest system',
)
subparser.add_argument(
    '--localimage',
    help='Image file for for installation from local fs',
)
subparser.add_argument(
    '--postboot',
    metavar='postboot_script',
    help='Run postboot_script on the guest after first boot',
)
subparser.add_argument(
    '--nopuppet',
    action='store_true',
    help='Skip running puppet in chroot before powering up',
)

subparser = subparsers.add_parser(
    'migrate',
    description=(__doc__ + ' - Migrate VM'),
)
subparser.set_defaults(func=migratevm)
subparser.add_argument(
    'vm_hostname',
    help='Hostname of the guest system',
)
subparser.add_argument(
    'dsthv_hostname',
    help='Hostname of destination hypervisor',
)
subparser.add_argument(
    '--newip',
    metavar='IP address',
    help='IP address to move VM to, in case you migrate between segments',
)
subparser.add_argument(
    '--runpuppet',
    action='store_true',
    help='Run puppet in chroot before powering up',
)
subparser.add_argument(
    '--nolbdowntime',
    action='store_true',
    help="Don't use testtool's downtime feature during migration",
)
subparser.add_argument(
    '--offline',
    action='store_true',
    help='Force offline migration',
)

subparser = subparsers.add_parser(
    'disk-set',
    description=(__doc__ + ' - Set VM Disk Size'),
)
subparser.set_defaults(func=disk_set)
subparser.add_argument(
    'vm_hostname',
    help='Hostname of the guest system',
)
subparser.add_argument(
    'size',
    help=(
        'New disk size with an optional unit (default GiB). '
        'Can be specified relative with "+".'
    )
)

subparser = subparsers.add_parser(
    'mem-set',
    description=(__doc__ + ' - Set VM Memory Size'),
)
subparser.set_defaults(func=mem_set)
subparser.add_argument(
    'vm_hostname',
    help='Hostname of the guest system',
)
subparser.add_argument(
    'size',
    help='New memory size with optional unit (default is MiB)',
)
subparser.add_argument(
    '--offline',
    action='store_true',
    help='Shutdown VM, change memory, and restart VM',
)


subparser = subparsers.add_parser(
    'vcpu-set',
    description=(__doc__ + ' - Set number of CPUs'),
)
subparser.set_defaults(func=vcpu_set)
subparser.add_argument(
    'vm_hostname',
    help='Hostname of the guest system',
)
subparser.add_argument(
    'count',
    type=int,
    help='New number of CPUs',
)
subparser.add_argument(
    '--offline',
    action='store_true',
    help='Shutdown VM, change CPUs, and restart VM',
)


subparser = subparsers.add_parser(
    'start',
    description=(__doc__ + ' - Start VM'),
)
subparser.set_defaults(func=vm_start)
subparser.add_argument(
    'vm_hostname',
    help='Hostname of the guest system',
)

subparser = subparsers.add_parser(
    'stop',
    description=(__doc__ + ' - Stop VM'),
)
subparser.set_defaults(func=vm_stop)
subparser.add_argument(
    'vm_hostname',
    help='Hostname of the guest system',
)
subparser.add_argument(
    '--force',
    action='store_true',
    help='Do not wait for guest to shutdown gracefully',
)

subparser = subparsers.add_parser(
    'restart',
    description=(__doc__ + ' - Restart VM'),
)
subparser.set_defaults(func=vm_restart)
subparser.add_argument(
    'vm_hostname',
    help='Hostname of the guest system',
)
subparser.add_argument(
    '--force',
    action='store_true',
    help='Do not wait for guest to shutdown gracefully',
)

subparser = subparsers.add_parser(
    'delete',
    description=(__doc__ + ' - Delete VM'),
)
subparser.set_defaults(func=vm_delete)
subparser.add_argument(
    'vm_hostname',
    help='Hostname of the guest system',
)

subparser = subparsers.add_parser(
    'info',
    description=(__doc__ + ' - VM information'),
)
subparser.set_defaults(func=host_info)
subparser.add_argument(
    'vm_hostname',
    help='Hostname of the guest system',
)

subparser = subparsers.add_parser(
    'sync',
    description=(__doc__ + ' - Synchronize Serveradmin attributes'),
)
subparser.set_defaults(func=vm_sync)
subparser.add_argument(
    'vm_hostname',
    help='Hostname of the guest system',
)


# TODO: Add argument to enable debug logging
logging.basicConfig(level=logging.INFO)
adminapi.auth()

args = vars(top_parser.parse_args())
args.pop('func')(**args)

# Disconnect all Fabric sessions to avoid errors during shutdown.
disconnect_all()
close_virtconns()

time.sleep(0.1)  # For Paramiko's race condition.
